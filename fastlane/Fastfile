UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

APP_SPECIFIC_VALUES = {
  wordpress: {
    display_name: 'WordPress',
    metadata_dir: 'metadata',
    glotpress_appstrings_project: 'https://translate.wordpress.org/projects/apps/android/dev/',
    glotpress_metadata_project: 'https://translate.wordpress.org/projects/apps/android/release-notes/',
    package_name: 'org.wordpress.android',
    bundle_name_prefix: 'wpandroid',
    screenshots_test_class: 'org.wordpress.android.ui.screenshots.WPScreenshotTest',
    screenshot_config_file: 'wordpress-config.json'
  },
  jetpack: {
    display_name: 'Jetpack',
    metadata_dir: 'jetpack_metadata',
    glotpress_appstrings_project: 'https://translate.wordpress.com/projects/jetpack/apps/android/',
    glotpress_metadata_project: 'https://translate.wordpress.com/projects/jetpack/apps/android/release-notes/',
    package_name: 'com.jetpack.android',
    bundle_name_prefix: 'jpandroid',
    screenshots_test_class: 'org.wordpress.android.ui.screenshots.JPScreenshotTest',
    screenshot_config_file: 'jetpack-config.json'
  }
}.freeze

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(Dir.home, '.configure', 'wordpress-android', 'secrets', 'google-upload-credentials.json')

PROTOTYPE_BUILD_FLAVOR = 'Jalapeno'.freeze
PROTOTYPE_BUILD_TYPE = 'Debug'.freeze
PROTOTYPE_BUILD_DOMAIN = 'https://d2twmm2nzpx3bg.cloudfront.net'

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
FASTLANE_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'fastlane')

VERSION_PROPERTIES_PATH = File.join(PROJECT_ROOT_FOLDER, 'version.properties')

# Instanstiate versioning classes
VERSION_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::MarketingVersionCalculator.new
VERSION_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::RCNotationVersionFormatter.new
BUILD_CODE_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeCalculator.new
BUILD_CODE_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeFormatter.new
VERSION_FILE = Fastlane::Wpmreleasetoolkit::Versioning::AndroidVersionFile.new(version_properties_path: VERSION_PROPERTIES_PATH)

########################################################################
# Environment
########################################################################
fastlane_require 'dotenv'
USER_ENV_FILE_PATH = File.join(Dir.home, '.wpandroid-env.default')
Dotenv.load(USER_ENV_FILE_PATH)

ENV[GHHELPER_REPO = 'wordpress-mobile/WordPress-Android']
ENV['PROJECT_ROOT_FOLDER'] = File.dirname(File.expand_path(__dir__)) + '/'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'
DEFAULT_BRANCH = 'trunk'
REPOSITORY_NAME = 'WordPress-Android'

# Used by Fastlane to work around the Google API random failures
ENV['SUPPLY_UPLOAD_MAX_RETRIES'] = '5'

#####################################################################################
# Version Methods
#####################################################################################

def commit_version_bump
  Fastlane::Helper::GitHelper.commit(
    message: 'Bump version number',
    files: VERSION_PROPERTIES_PATH
  )
end

# Returns the current version name from `version.properties` without needing formatting or calculations
def version_name_current
  VERSION_FILE.read_version_name
end

# Returns the release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
#
def release_version_current
  # Read the current release version from the version.properties file and parse it into an AppVersion object
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  # Return the formatted release version
  VERSION_FORMATTER.release_version(current_version)
end

#  Returns the next release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
#
def next_release_version
  # Read the current release version from the version.properties file and parse it into an AppVersion object
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  # Calculate the next release version
  next_release_version = VERSION_CALCULATOR.next_release_version(version: current_version)
  # Return the formatted release version
  VERSION_FORMATTER.release_version(next_release_version)
end

# Returns the beta version of the app in the format `1.2-rc-1`
#
def beta_version_current
  # Read the current release version from the version.properties file and parse it into an AppVersion object
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  # Return the formatted release version
  VERSION_FORMATTER.beta_version(current_version)
end

# Returns the beta version that is used by the code freeze
# It first increments the minor number, which also resets the build number to 0
# It then bumps the build number so the -rc-1 can be appended to the code freeze version
def beta_version_code_freeze
  # Read the current release version from the version.properties file and parse it into an AppVersion object
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  # Calculate the next major version number
  next_minor_version = VERSION_CALCULATOR.next_minor_version(version: current_version)
  # Calculate the next build number
  beta_version_code_freeze = VERSION_CALCULATOR.next_build_number(version: next_minor_version)
  # Return the formatted release version
  VERSION_FORMATTER.beta_version(beta_version_code_freeze)
end

# Returns the beta version of the app in the format `1.2-rc-1`
#
def beta_version_next
  # Read the current release version from the version.properties file and parse it into an AppVersion object
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  # Calculate the next beta version
  beta_version_next = VERSION_CALCULATOR.next_build_number(version: current_version)
  # Return the formatted release version
  VERSION_FORMATTER.beta_version(beta_version_next)
end

# Returns the current build code of the app
#
def build_code_current
  # Read the current build code from the version.properties file into to a BuildCode object
  build_code_current = VERSION_FILE.read_version_code
  # Return the formatted build code
  BUILD_CODE_FORMATTER.build_code(build_code: build_code_current)
end

# Returns the next build code of the app
#
def build_code_next
  # Read the current build code from the version.properties file into to a BuildCode object
  build_code_current = VERSION_FILE.read_version_code
  # Calculate the next build code
  build_code_next = BUILD_CODE_CALCULATOR.next_build_code(build_code: build_code_current)
  # Return the formatted build code
  BUILD_CODE_FORMATTER.build_code(build_code: build_code_next)
end

########################################################################
# Import domain-specific lanes
########################################################################
import 'helpers/github.rb'
import 'lanes/build.rb'
import 'lanes/localization.rb'
import 'lanes/release.rb'
import 'lanes/screenshots.rb'
import 'lanes/test.rb'
import 'lanes/release_management_in_ci.rb'

default_platform(:android)

before_all do |lane|
  # Check that the env file exists
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("#{USER_ENV_FILE_PATH} not found: Please copy fastlane/env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end

  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end
